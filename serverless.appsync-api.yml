name: appsyncmasterclass
schema: schema.api.graphql
authenticationType: AMAZON_COGNITO_USER_POOLS
userPoolConfig:
  awsRegion: us-west-1
  defaultAction: ALLOW
  userPoolId: !Ref CognitoUserPool
mappingTemplatesLocation: mapping-templates
mappingTemplates:
  - type: Query
    field: getMyProfile
    dataSource: usersTable
    # request: Query.getMyProfile.request.vtl       ## these can be ignored since I am following the default convention
    # response: Query.getMyProfile.response.vtl
  - type: Query
    field: getImageUploadUrl
    dataSource: getImageUploadUrlFunction
    request: false
    response: false
  - type: Query
    field: getTweets
    dataSource: tweetsTable
  - type: Query
    field: getMyTimeline
    dataSource: timelinesTable

  - type: Mutation
    field: editMyProfile
    dataSource: usersTable
  - type: Mutation
    field: like
    dataSource: likeMutation
  - type: Mutation
    field: tweet
    dataSource: tweetFunction
    request: false
    response: false
  
  # NESTED FIELDS
  - type: Tweet
    field: profile
    dataSource: usersTable
  - type: TimelinePage
    field: tweets
    dataSource: tweetsTable


dataSources:
  - type: NONE
    name: None
  - type: AMAZON_DYNAMODB
    name: usersTable
    config:
      tableName: !Ref UsersTable
      # serviceRoleArn: if you do not specify this, then appsync will generate one 
  - type: AMAZON_DYNAMODB
    name: tweetsTable
    config:
      tableName: !Ref TweetsTable
  - type: AMAZON_DYNAMODB
    name: timelinesTable
    config:
      tableName: !Ref TimelinesTable
  - type: AMAZON_DYNAMODB
    name: likesTable
    config:
      tableName: !Ref LikesTable
  - type: AMAZON_DYNAMODB
    name: likeMutation
    config:
      tableName: !Ref LikesTable
      iamRoleStatements:
        - Effect: Allow
          Action: dynamodb:PutItem
          Resource: !GetAtt LikesTable.Arn
        - Effect: Allow
          Action: dynamodb:UpdateItem
          Resource:
            - !GetAtt UsersTable.Arn
            - !GetAtt TweetsTable.Arn
  - type: AWS_LAMBDA
    name: getImageUploadUrlFunction
    config:
      functionName: getImageUploadUrl
  - type: AWS_LAMBDA
    name: tweetFunction
    config:
      functionName: tweet

substitutions:
  TweetsTable: !Ref TweetsTable
  LikesTable: !Ref LikesTable
  UsersTable: !Ref UsersTable
